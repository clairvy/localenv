[user]
	name = clairvy
	email = clairvy@gmail.com
[color]
	diff = auto
	status = auto
	branch = auto
	interactive = auto
	grep = auto
[core]
	excludesfile = ~/.gitignore
	precomposeunicode = true
[alias]
	st = status -sb
	sta = status
	sh = show
	so = remote show origin
	ft = fetch
	up = pull --rebase       # pull rebase
	rbm = rebase master      # masterへのrebaseはよく使うのでalias
	ad = add
	ci = commit
	cam = commit -a --amend  # 直前のcommitを修正
	co = checkout
	cb = checkout -b
	cm = checkout master
	# branch関連
	br = branch
	ba = branch -a           # originも含めた全てのbranchを表示
	bm = branch --merged     # merge済みのbranchを表示
	bn = branch --no-merged  # mergeしてないbranchを表示
	bo = branch -r
	# log関連
	wc = whatchanged         # logに変更されたファイルも一緒に出す
#	ls = log --stat          # logに変更されたファイルも一緒に出す
#	lp = log -p              # diffも一緒に出す
	la = log --pretty=\"format:%ad %h (%an): %s\" --date=short  # ざっくりログ出す
	lr = log origin          # originのlog
	l = log --graph -n 20 --pretty=format:'%C(yellow)%h%C(cyan)%d%Creset %s %C(green)- %an, %cr%Creset'
	ll = log --stat --abbrev-commit
	ln = log --graph -n 20 --pretty=format:'%C(yellow)%h%C(cyan)%d%Creset %s %C(green)- %an, %cr%Creset' --name-status
	lp = log --oneline -n 20 -p
	ls = log --stat --abbrev-commit -n 1 # display previous log
	oneline = log --pretty=oneline
	ranking = shortlog -s -n --no-merges
	# logをtree表示
	loggr = log --graph --date-order --pretty=format:'%Cblue%h %Cgreen%ci %Cred%an %Cblue%m %Creset%s %Cred%d'
	logg = log --stat --pretty=format:'%Cblue%h %Cgreen%ar %Cred%an %Creset%s %Cred%d'
	log-graph = log --graph --date=short --pretty=format:'%Cgreen%h %cd %Cblue%cn %Creset%s'
	log-all = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
	log-al = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
	log-a = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
	logall = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
	logal = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
	loga = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
	lga = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
	# diff関連
	df = diff
	dif = diff
	dm = diff master           # masterとのdiff
	dw = diff --color-words    # 単語単位でいろつけてdiff
	dc = diff --cached         # addされているものとのdiff
	ds = diff --staged         # 同上(1.6.1移行)
	d1 = diff HEAD~            # HEADから1つ前とdiff
	d2 = diff HEAD~~           # HEADから2つ前とdiff
	d3 = diff HEAD~~~          # HEADから3つ前とdiff
	d4 = diff HEAD~~~~         # HEADから4つ前とdiff
	d5 = diff HEAD~~~~~        # HEADから5つ前とdiff
	d10 = diff HEAD~~~~~~~~~~  # HEADから10前とdiff
	# mergeの際にconflictが起きたファイルを編集
	edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
	# mergeの際にconflictが起きたファイルをadd
	add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"
	# grep関連
	gr = grep
	gn = grep -n
	sm = submodule
	sma = submodule add
	smi = submodule update --init
	smu = submodule foreach "git checkout master; git pull origin master"
	smupdate = submodule foreach "git checkout master; git pull origin master"
	show-graph = log --graph --abbrev-commit --pretty=oneline
	feature = flow feature
	release = flow release
	hotfix = flow hotfix
	hooks = hooks
	ticket = ticket
	rma = "!f() { git ls-files --deleted | sort -u; }; git rm `f`"
	rebase-status = "!f() { GIT_DIR=`git rev-parse --git-dir`;if [ -d $GIT_DIR/rebase-merge -o -f $GIT_DIR/rebase-apply/rebasing ]; then if [ -f $GIT_DIR/rebase-merge/interactive ]; then br='rebase-i'; else br='rebase-m'; fi; echo 'rebasing...('$br')'; else echo 'not rebasing.'; fi }; f"
	pview = "!f() { git push -n 2>&1 | tail -1 | awk '{if ($1 ~ /\\.\\./){print $1}}' | xargs -I {} git log --oneline {} | cat; }; f" # for git version < 1.8.2
# github config in /etc/gitconfig
[init]
	templatedir = ~/.git_template
[pre-push]
	cmd = git log --color --pretty='%h %s %Cred%d%Creset %C(green)- %cr%Creset c:%cn:%ce a:%an:%ae' {}
[ghq]
    root = ~/w/gopath/src
[filter "lfs"]
	smudge = git-lfs smudge --skip -- %f
	process = git-lfs filter-process --skip
	required = true
	clean = git-lfs clean -- %f
[log]
    date = format:%Y/%m/%d_%H:%M:%S%z
